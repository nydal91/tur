From 138e78231c4508cde887d7d9d7267432e9c9b4ca Mon Sep 17 00:00:00 2001
From: PixelyIon <pixelyion@protonmail.com>
Date: Sun, 6 Aug 2023 10:43:17 +0000
Subject: [PATCH] dnsapi: Support Android NDK networking for DNS resolution

Bionic doesn't provide a complete enough resolv.h API to be supported by the
current dnsapi implementation. To attain proper support, the Android NDK
networking API is now supported by libresolv in dnsapi resulting in it being
able to resolve all DNS queries successfully.
---
 dlls/dnsapi/libresolv.c | 155 +++++++++++++++++++++++++++++++++++++++-
 1 file changed, 153 insertions(+), 2 deletions(-)

diff --git a/dlls/dnsapi/libresolv.c b/dlls/dnsapi/libresolv.c
index 9034651ac6d..7bc5901d1bd 100644
--- a/dlls/dnsapi/libresolv.c
+++ b/dlls/dnsapi/libresolv.c
@@ -24,7 +24,7 @@
 
 #include "config.h"
 
-#ifdef HAVE_RESOLV
+#if defined(HAVE_RESOLV) || defined(__ANDROID__)
 #include <stdarg.h>
 #include <string.h>
 #include <stdio.h>
@@ -59,6 +59,8 @@
 
 WINE_DEFAULT_DEBUG_CHANNEL(dnsapi);
 
+#ifdef HAVE_RESOLV
+
 /* call res_init() just once because of a bug in Mac OS X 10.4 */
 /* call once per thread on systems that have per-thread _res */
 static void init_resolver( void )
@@ -341,6 +343,155 @@ static NTSTATUS resolv_query( void *args )
     return ret;
 }
 
+#endif  /* HAVE_RESOLV */
+
+#ifdef __ANDROID__
+
+#include <dlfcn.h>
+
+enum ResNsendFlags : uint32_t {
+    ANDROID_RESOLV_NO_RETRY = 1 << 0,
+    ANDROID_RESOLV_NO_CACHE_STORE = 1 << 1,
+    ANDROID_RESOLV_NO_CACHE_LOOKUP = 1 << 2,
+};
+
+typedef uint64_t net_handle_t;
+
+#define NETWORK_UNSPECIFIED ((net_handle_t)0)
+
+static int (*p_android_res_nsend)(net_handle_t network, const uint8_t *msg, size_t msglen,
+                      uint32_t flags);
+
+static int (*p_android_res_nresult)(int fd, int *rcode, uint8_t *answer, size_t anslen);
+
+static BOOL android_resolv_init( void )
+{
+    static BOOL init_done = FALSE;
+    if (!init_done)
+    {
+        void *android_handle = dlopen( "libandroid.so", RTLD_NOW );
+        if (!android_handle) {
+            TRACE( "failed to load libandroid.so: %s\n", dlerror() );
+            init_done = TRUE;
+            return FALSE;
+        }
+
+#define LOAD_FUNCPTR(f) p_##f = dlsym(android_handle, #f)
+        LOAD_FUNCPTR(android_res_nsend);
+        LOAD_FUNCPTR(android_res_nresult);
+#undef LOAD_FUNCPTR
+        init_done = TRUE;
+    }
+
+    return p_android_res_nsend && p_android_res_nresult;
+}
+
+static NTSTATUS resolv_get_searchlist( void *args )
+{
+    /* Android NDK networking doesn't have DNS suffixes/searchlists */
+    const struct get_searchlist_params *params = args;
+    WCHAR *list = params->list;
+
+    if (!list || *params->len < sizeof(WCHAR))
+    {
+        *params->len = sizeof(WCHAR);
+        return !list ? ERROR_SUCCESS : ERROR_MORE_DATA;
+    }
+
+    *list = 0; /* null terminator */
+    *params->len = sizeof(WCHAR);
+
+    return ERROR_SUCCESS;
+}
+
+static NTSTATUS resolv_get_serverlist( void *args )
+{
+    /* Android NDK networking doesn't support retrieving the nameservers */ 
+    TRACE( "resolv_get_serverlist not supported on Android\n" );
+    return DNS_ERROR_NO_DNS_SERVERS;
+}
+
+static NTSTATUS resolv_set_serverlist( void *args )
+{
+    /* Android NDK networking doesn't support changing the nameservers */ 
+    TRACE( "resolv_set_serverlist not supported on Android\n" );
+    return ERROR_SUCCESS;
+}
+
+static NTSTATUS resolv_query( void *args )
+{
+    const struct query_params *params = args;
+    uint8_t msg[NS_PACKETSZ];
+    int msglen, res, rcode = 0;
+    HEADER *header;
+    uint32_t flags = 0;
+
+    if (!android_resolv_init())
+        return DNS_ERROR_RCODE_NOT_IMPLEMENTED; /* The host libandroid doesn't
+                                                   seem to implement the NDK
+                                                   networking functions */
+
+    msglen = res_mkquery( ns_o_query, params->name, ns_c_in, params->type,
+                          NULL, 0, NULL, msg, NS_PACKETSZ );
+
+    header = (HEADER *)msg;
+    header->rd = !(params->options & DNS_QUERY_NO_RECURSION);
+    header->ad = (params->options & DNS_QUERY_DNSSEC_OK);
+
+    if (params->options & DNS_QUERY_BYPASS_CACHE)
+        flags = ANDROID_RESOLV_NO_CACHE_STORE | ANDROID_RESOLV_NO_CACHE_LOOKUP;
+
+    if ((res = (*p_android_res_nsend)( NETWORK_UNSPECIFIED, msg, msglen, flags )) < 0)
+        return DNS_ERROR_RCODE_REFUSED; /* The query failed, the results provided
+                                           by this don't properly translate to
+                                           WinAPI ones */
+
+    if ((res = (*p_android_res_nresult)( res, &rcode, params->buf,
+                                        *params->len )) < 0)
+        return DNS_ERROR_RCODE_REFUSED;
+
+    if (rcode == ns_r_noerror)
+    {
+        *params->len = res;
+        return ERROR_SUCCESS;
+    }
+    else
+    {
+        switch (rcode) {
+            case ns_r_formerr:
+                return DNS_ERROR_RCODE_FORMAT_ERROR;
+            case ns_r_servfail:
+                return DNS_ERROR_RCODE_SERVER_FAILURE;
+            case ns_r_nxdomain:
+                return DNS_ERROR_RCODE_NAME_ERROR;
+            case ns_r_notimpl:
+                return DNS_ERROR_RCODE_NOT_IMPLEMENTED;
+            case ns_r_refused:
+                return DNS_ERROR_RCODE_REFUSED;
+            case ns_r_yxdomain:
+                return DNS_ERROR_RCODE_YXDOMAIN;
+            case ns_r_yxrrset:
+                return DNS_ERROR_RCODE_YXRRSET;
+            case ns_r_nxrrset:
+                return DNS_ERROR_RCODE_NXRRSET;
+            case ns_r_notauth:
+                return DNS_ERROR_RCODE_NOTAUTH;
+            case ns_r_notzone:
+                return DNS_ERROR_RCODE_NOTZONE;
+            case ns_r_badsig:
+                return DNS_ERROR_RCODE_BADSIG;
+            case ns_r_badkey:
+                return DNS_ERROR_RCODE_BADKEY;
+            case ns_r_badtime:
+                return DNS_ERROR_RCODE_BADTIME;
+            default:
+                return DNS_ERROR_RCODE_NOT_IMPLEMENTED;
+        }
+    }
+}
+
+#endif
+
 const unixlib_entry_t __wine_unix_call_funcs[] =
 {
     resolv_get_searchlist,
@@ -426,4 +577,4 @@ C_ASSERT( ARRAYSIZE(__wine_unix_call_wow64_funcs) == unix_funcs_count );
 
 #endif  /* _WIN64 */
 
-#endif /* HAVE_RESOLV */
+#endif /* defined(HAVE_RESOLV) || defined(__ANDROID__) */
